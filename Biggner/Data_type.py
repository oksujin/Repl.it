### 수 자료형 ###
## 정수형의 유효숫자 표현하기
e = 1e9
print(e)

## 실수형의 round 사용하기
# 가장 많이 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해
# 4바이트 혹은 8바이트라는 고정된 크기의 메모리를 할당한다.
# 때문에, 실수 정보를 표현할 때 정확도에 한계를 가진다.

# 그래서 0.3+0.6=0.89999가 된다.
a = 0.3 + 0.6
print(a)

# 이를 방지하기 위해서 round를 사용한다.
a = round(a, 5)
print(a)

####################################################
### 리스트 자료형 ###
## 리스트 초기화
a = list()
a = []

## 크기가 N인 1차원 리스트 초기화 방법
n = 10
a = [0] * n
print(a)

## 리스트 컴프리헨션 (List Comprehension)
# 리스트 내부에 코드를 작성하는 방법

# 1. 0부터 19까지 수 중, 홀수만 포함하기
a = [i for i in range(20) if i % 2 == 1]
print (a)

# 2. 1부터 9까지의 수의 제곱 값을 포함하는 리스트
b = [i*i for i in range (1, 9)]
print(b)

# 3. N*M 크기의 2차원 리스트 초기화하기
N = 3
M = 4
array = [[0] * M for _ in range(N)]
print(array)

## 참고
# _의 역할 : 반복을 수행하되, 반복을 위한 변수 값을 무시할 때 사용

## 리스트의 메서드들
# append(), sort(reverse=False), reverse()
# insert(), count(), remove()

# 1. insert(삽입할 위치, 삽입할 값) = O(N)
# 삽입할 위치에 삽입할 값을 넣어준 후, 리스트 원소 위치를 조정해야 해서
# 시간복잡도가 O(N)이다. insert를 남발하면 시간초과될 수 있다.
# append()는 맨 뒤에 붙이는거라서 시간복잡도가 O(1)

# 2. remove(특정 값) = O(N)
# insert와 마찬가지로 리스트 중간의 원소를 삭제한 후,
# 리스트 원소 위치를 조정해야 해서 O(N)이다.

## 특정한 값의 원소를 모두 제거하는 방법
# remove_set을 지정하고, 여기 포함되어있지 않을 때만
# 새로운 리스트 변수에 넣어주도록 한다.
a = [1, 2, 2, 3, 3, 4, 5, 5, 6]
remove_set = [3, 5]

# 리스트 컴프리헨션 사용해서
# i가 a에 포함되지 않을 때만, array에 담아준다.
array = [i for i in a if i not in remove_set]
print(array)